#lang racket/base
(require "j-bob-lang.rkt")
(require "j-bob.rkt")
(provide (all-defined-out))

;——

;; Chapter 1

(defun chapter1.example1 ()
  (J-Bob/step (prelude)
              '(car (cons 'ham '(eggs)))
              '(((1) (cons 'ham '(eggs)))
                (() (car '(ham eggs))))))

(defun chapter1.example2 ()
  (J-Bob/step (prelude)
              '(atom '())
              '((() (atom '())))))

(defun chapter1.example3 ()
  (J-Bob/step (prelude)
              '(atom (cons 'ham '(eggs)))
              '(((1) (cons 'ham '(eggs)))
                (() (atom '(ham eggs))))))

(defun chapter1.example4 ()
  (J-Bob/step (prelude)
              '(atom (cons a b))
              '((() (atom/cons a b)))))

(defun chapter1.example5 ()
  (J-Bob/step (prelude)
              '(equal 'flapjack (atom (cons a b)))
              '(((2) (atom/cons a b))
                (() (equal 'flapjack 'nil)))))

(defun chapter1.example6 ()
  (J-Bob/step (prelude)
              '(atom (cdr (cons (car (cons p q)) '())))
              '(((1 1 1) (car/cons p q))
                ((1) (cdr/cons p '()))
                (() (atom '())))))

(defun chapter1.example7 ()
  (J-Bob/step (prelude)
              '(atom (cdr (cons (car (cons p q)) '())))
              '(((1) (cdr/cons (car (cons p q)) '()))
                (() (atom '())))))

(defun chapter1.example8 ()
  (J-Bob/step (prelude)
              '(car (cons (equal (cons x y) (cons x y)) '(and crumpets)))
              '(((1 1) (equal-same (cons x y)))
                ((1) (cons 't '(and crumpets)))
                (() (car '(t and crumpets))))))

(defun chapter1.example9 ()
  (J-Bob/step (prelude)
              '(equal (cons x y) (cons 'bagels '(and lox)))
              '((() (equal-swap (cons x y) (cons 'bagels '(and lox)))))))

(defun chapter1.example10 ()
  (J-Bob/step (prelude)
              '(cons y (equal (car (cons (cdr x) (car y))) (equal (atom x) 'nil)))
              '(((2 1) (car/cons (cdr x) (car y))))))

(defun chapter1.example11 ()
  (J-Bob/step (prelude)
              '(cons y (equal (car (cons (cdr x) (car y))) (equal (atom x) 'nil)))
              '(((2 1) (car/cons (car (cons (cdr x) (car y))) '(oats)))
                ((2 2 2) (atom/cons (atom (cdr (cons a b))) (equal (cons a b) c)))
                ((2 2 2 1 1 1) (cdr/cons a b))
                ((2 2 2 1 2) (equal-swap (cons a b) c)))))

(defun chapter1.example12 ()
  (J-Bob/step (prelude)
              '(atom (car (cons (car a) (cdr b))))
              '(((1) (car/cons (car a) (cdr b))))))

;; Chapter 2

(defun chapter2.example1 ()
  (J-Bob/step (prelude)
              '(if (car (cons a b)) c c)
              '(((Q) (car/cons a b))
                (() (if-same a c))
                (()
                 (if-same
                  (if (equal a 't) (if (equal 'nil 'nil) a b) (equal 'or (cons 'black '(coffee))))
                  c))
                ((Q E 2) (cons 'black '(coffee)))
                ((Q A Q) (equal-same 'nil))
                ((Q A) (if-true a b))
                ((Q A) (equal-if a 't)))))

(defun chapter2.example2 ()
  (J-Bob/step (prelude)
              '(if (atom (car a))
                   (if (equal (car a) (cdr a)) 'hominy 'grits)
                   (if (equal (cdr (car a)) '(hash browns))
                       (cons 'ketchup (car a))
                       (cons 'mustard (car a))))
              '(((E A 2) (cons/car+cdr (car a)))
                ((E A 2 2) (equal-if (cdr (car a)) '(hash browns))))))

(defun chapter2.example3 ()
  (J-Bob/step (prelude)
              '(cons 'statement
                     (cons (if (equal a 'question) (cons n '(answer)) (cons n '(else)))
                           (if (equal a 'question) (cons n '(other answer)) (cons n '(other else)))))
              '(((2)
                 (if-same (equal a 'question)
                          (cons (if (equal a 'question) (cons n '(answer)) (cons n '(else)))
                                (if (equal a 'question) (cons n '(other answer)) (cons n '(other else))))))
                ((2 A 1) (if-nest-A (equal a 'question) (cons n '(answer)) (cons n '(else))))
                ((2 E 1) (if-nest-E (equal a 'question) (cons n '(answer)) (cons n '(else))))
                ((2 A 2)
                 (if-nest-A (equal a 'question) (cons n '(other answer)) (cons n '(other else))))
                ((2 E 2)
                 (if-nest-E (equal a 'question)
                            (cons n '(other answer))
                            (cons n '(other else)))))))

;; Chapter 3

(defun defun.pair ()
  (J-Bob/define (prelude)
                '(((defun pair (x y)
                     (cons x (cons y '())))
                   nil))))

(defun defun.first-of ()
  (J-Bob/define (defun.pair)
                '(((defun first-of (x)
                     (car x))
                   nil))))

(defun defun.second-of ()
  (J-Bob/define (defun.first-of)
                '(((defun second-of (x)
                     (car (cdr x)))
                   nil))))

(defun dethm.first-of-pair ()
  (J-Bob/define (defun.second-of)
                '(((dethm first-of-pair (a b)
                          (equal (first-of (pair a b)) a))
                   nil
                   ((1 1) (pair a b))
                   ((1) (first-of (cons a (cons b '()))))
                   ((1) (car/cons a (cons b '())))
                   (() (equal-same a))))))

(defun dethm.second-of-pair ()
  (J-Bob/define (dethm.first-of-pair)
                '(((dethm second-of-pair (a b)
                          (equal (second-of (pair a b)) b))
                   nil
                   ((1) (second-of (pair a b)))
                   ((1 1 1) (pair a b))
                   ((1 1) (cdr/cons a (cons b '())))
                   ((1) (car/cons b '()))
                   (() (equal-same b))))))

(defun defun.in-pair? ()
  (J-Bob/define (dethm.second-of-pair)
                '(((defun in-pair? (xs)
                     (if (equal (first-of xs) '?) 't (equal (second-of xs) '?)))
                   nil))))

(defun dethm.in-first-of-pair ()
  (J-Bob/define (defun.in-pair?)
                '(((dethm in-first-of-pair (b)
                          (equal (in-pair? (pair '? b)) 't))
                   nil
                   ((1 1) (pair '? b))
                   ((1) (in-pair? (cons '? (cons b '()))))
                   ((1 Q 1) (first-of (cons '? (cons b '()))))
                   ((1 Q 1) (car/cons '? (cons b '())))
                   ((1 Q) (equal-same '?))
                   ((1) (if-true 't (equal (second-of (cons '? (cons b '()))) '?)))
                   (() (equal-same 't))))))

(defun dethm.in-second-of-pair ()
  (J-Bob/define (dethm.in-first-of-pair)
                '(((dethm in-second-of-pair (a)
                          (equal (in-pair? (pair a '?)) 't))
                   nil
                   ((1 1) (pair a '?))
                   ((1) (in-pair? (cons a (cons '? '()))))
                   ((1 Q 1) (first-of (cons a (cons '? '()))))
                   ((1 Q 1) (car/cons a (cons '? '())))
                   ((1 E 1) (second-of (cons a (cons '? '()))))
                   ((1 E 1 1) (cdr/cons a (cons '? '())))
                   ((1 E 1) (car/cons '? '()))
                   ((1 E) (equal-same '?))
                   ((1) (if-same (equal a '?) 't))
                   (() (equal-same 't))))))

;; Chapter 4

(defun defun.list0? ()
  (J-Bob/define (dethm.in-second-of-pair)
                '(((defun list0? (x)
                     (equal x '()))
                   nil))))

(defun defun.list1? ()
  (J-Bob/define (defun.list0?)
                '(((defun list1? (x)
                     (if (atom x) 'nil (list0? (cdr x))))
                   nil))))

(defun defun.list2? ()
  (J-Bob/define (defun.list1?)
                '(((defun list2? (x)
                     (if (atom x) 'nil (list1? (cdr x))))
                   nil))))

(defun dethm.contradiction ()
  (J-Bob/prove
   (list-extend (prelude)
                '(defun partial (x)
                   (if (partial x) 'nil 't)))
   '(((dethm contradiction () 'nil)
      nil
      (() (if-same (partial x) 'nil))
      ((A) (if-nest-A (partial x) 'nil 't))
      ((E) (if-nest-E (partial x) 't 'nil))
      ((A Q) (partial x))
      ((E Q) (partial x))
      ((A Q) (if-nest-A (partial x) 'nil 't))
      ((E Q) (if-nest-E (partial x) 'nil 't))
      ((A) (if-false 'nil 't))
      ((E) (if-true 't 'nil))
      (() (if-same (partial x) 't))))))

(defun defun.list? ()
  (J-Bob/define (defun.list2?)
                '(((defun list? (x)
                     (if (atom x) (equal x '()) (list? (cdr x))))
                   (size x)
                   ((Q) (natp/size x))
                   (() (if-true (if (atom x) 't (< (size (cdr x)) (size x))) 'nil))
                   ((E) (size/cdr x))
                   (() (if-same (atom x) 't))))))

(defun defun.sub ()
  (J-Bob/define (defun.list?)
                '(((defun sub (x y)
                     (if (atom y) (if (equal y '?) x y) (cons (sub x (car y)) (sub x (cdr y)))))
                   (size y)
                   ((Q) (natp/size y))
                   (()
                    (if-true
                     (if (atom y)
                         't
                         (if (< (size (car y)) (size y)) (< (size (cdr y)) (size y)) 'nil))
                     'nil))
                   ((E Q) (size/car y))
                   ((E A) (size/cdr y))
                   ((E) (if-true 't 'nil))
                   (() (if-same (atom y) 't))))))

;; Chapter 5

(defun defun.memb? ()
  (J-Bob/define (defun.sub)
                '(((defun memb? (xs)
                     (if (atom xs) 'nil (if (equal (car xs) '?) 't (memb? (cdr xs)))))
                   (size xs)
                   ((Q) (natp/size xs))
                   (()
                    (if-true
                     (if (atom xs) 't (if (equal (car xs) '?) 't (< (size (cdr xs)) (size xs))))
                     'nil))
                   ((E E) (size/cdr xs))
                   ((E) (if-same (equal (car xs) '?) 't))
                   (() (if-same (atom xs) 't))))))

(defun defun.remb ()
  (J-Bob/define (defun.memb?)
                '(((defun remb (xs)
                     (if (atom xs)
                         '()
                         (if (equal (car xs) '?) (remb (cdr xs)) (cons (car xs) (remb (cdr xs))))))
                   (size xs)
                   ((Q) (natp/size xs))
                   (() (if-true (if (atom xs) 't (< (size (cdr xs)) (size xs))) 'nil))
                   ((E) (size/cdr xs))
                   (() (if-same (atom xs) 't))))))

(defun dethm.memb?/remb0 ()
  (J-Bob/define (defun.remb)
                '(((dethm memb?/remb0 ()
                          (equal (memb? (remb '())) 'nil))
                   nil
                   ((1 1) (remb '()))
                   ((1 1 Q) (atom '()))
                   ((1 1)
                    (if-true '()
                             (if (equal (car '()) '?) (remb (cdr '())) (cons (car '()) (remb (cdr '()))))))
                   ((1) (memb? '()))
                   ((1 Q) (atom '()))
                   ((1) (if-true 'nil (if (equal (car '()) '?) 't (memb? (cdr '())))))
                   (() (equal-same 'nil))))))

(defun dethm.memb?/remb1 ()
  (J-Bob/define (dethm.memb?/remb0)
                '(((dethm memb?/remb1 (x1)
                          (equal (memb? (remb (cons x1 '()))) 'nil))
                   nil
                   ((1 1) (remb (cons x1 '())))
                   ((1 1 Q) (atom/cons x1 '()))
                   ((1 1)
                    (if-false '()
                              (if (equal (car (cons x1 '())) '?)
                                  (remb (cdr (cons x1 '())))
                                  (cons (car (cons x1 '())) (remb (cdr (cons x1 '())))))))
                   ((1 1 Q 1) (car/cons x1 '()))
                   ((1 1 A 1) (cdr/cons x1 '()))
                   ((1 1 E 1) (car/cons x1 '()))
                   ((1 1 E 2 1) (cdr/cons x1 '()))
                   ((1)
                    (if-same (equal x1 '?)
                             (memb? (if (equal x1 '?) (remb '()) (cons x1 (remb '()))))))
                   ((1 A 1) (if-nest-A (equal x1 '?) (remb '()) (cons x1 (remb '()))))
                   ((1 E 1) (if-nest-E (equal x1 '?) (remb '()) (cons x1 (remb '()))))
                   ((1 A) (memb?/remb0))
                   ((1 E) (memb? (cons x1 (remb '()))))
                   ((1 E Q) (atom/cons x1 (remb '())))
                   ((1 E)
                    (if-false 'nil
                              (if (equal (car (cons x1 (remb '()))) '?)
                                  't
                                  (memb? (cdr (cons x1 (remb '())))))))
                   ((1 E Q 1) (car/cons x1 (remb '())))
                   ((1 E E 1) (cdr/cons x1 (remb '())))
                   ((1 E) (if-nest-E (equal x1 '?) 't (memb? (remb '()))))
                   ((1 E) (memb?/remb0))
                   ((1) (if-same (equal x1 '?) 'nil))
                   (() (equal-same 'nil))))))

(defun dethm.memb?/remb2 ()
  (J-Bob/define (dethm.memb?/remb1)
                '(((dethm memb?/remb2 (x1 x2)
                          (equal (memb? (remb (cons x2 (cons x1 '())))) 'nil))
                   nil
                   ((1 1) (remb (cons x2 (cons x1 '()))))
                   ((1 1 Q) (atom/cons x2 (cons x1 '())))
                   ((1 1)
                    (if-false '()
                              (if (equal (car (cons x2 (cons x1 '()))) '?)
                                  (remb (cdr (cons x2 (cons x1 '()))))
                                  (cons (car (cons x2 (cons x1 '())))
                                        (remb (cdr (cons x2 (cons x1 '()))))))))
                   ((1 1 Q 1) (car/cons x2 (cons x1 '())))
                   ((1 1 A 1) (cdr/cons x2 (cons x1 '())))
                   ((1 1 E 1) (car/cons x2 (cons x1 '())))
                   ((1 1 E 2 1) (cdr/cons x2 (cons x1 '())))
                   ((1)
                    (if-same (equal x2 '?)
                             (memb?
                              (if (equal x2 '?) (remb (cons x1 '())) (cons x2 (remb (cons x1 '())))))))
                   ((1 A 1)
                    (if-nest-A (equal x2 '?) (remb (cons x1 '())) (cons x2 (remb (cons x1 '())))))
                   ((1 E 1)
                    (if-nest-E (equal x2 '?) (remb (cons x1 '())) (cons x2 (remb (cons x1 '())))))
                   ((1 A) (memb?/remb1 x1))
                   ((1 E) (memb? (cons x2 (remb (cons x1 '())))))
                   ((1 E Q) (atom/cons x2 (remb (cons x1 '()))))
                   ((1 E)
                    (if-false 'nil
                              (if (equal (car (cons x2 (remb (cons x1 '())))) '?)
                                  't
                                  (memb? (cdr (cons x2 (remb (cons x1 '()))))))))
                   ((1 E Q 1) (car/cons x2 (remb (cons x1 '()))))
                   ((1 E E 1) (cdr/cons x2 (remb (cons x1 '()))))
                   ((1 E) (if-nest-E (equal x2 '?) 't (memb? (remb (cons x1 '())))))
                   ((1 E) (memb?/remb1 x1))
                   ((1) (if-same (equal x2 '?) 'nil))
                   (() (equal-same 'nil))))))

;; Chapter 6

(defun dethm.memb?/remb ()
  (J-Bob/define (dethm.memb?/remb2)
                '(((dethm memb?/remb (xs)
                          (equal (memb? (remb xs)) 'nil))
                   (list-induction xs)
                   ((A 1 1) (remb xs))
                   ((A 1 1)
                    (if-nest-A (atom xs)
                               '()
                               (if (equal (car xs) '?) (remb (cdr xs)) (cons (car xs) (remb (cdr xs))))))
                   ((A 1) (memb? '()))
                   ((A 1 Q) (atom '()))
                   ((A 1) (if-true 'nil (if (equal (car '()) '?) 't  (memb? (cdr '())))))
                   ((A) (equal-same 'nil))
                   ((E A 1 1) (remb xs))
                   ((E A 1 1)
                    (if-nest-E (atom xs)
                               '()
                               (if (equal (car xs) '?) (remb (cdr xs)) (cons (car xs) (remb (cdr xs))))))
                   ((E A 1)
                    (if-same (equal (car xs) '?)
                             (memb?
                              (if (equal (car xs) '?) (remb (cdr xs)) (cons (car xs) (remb (cdr xs)))))))
                   ((E A 1 A 1)
                    (if-nest-A (equal (car xs) '?) (remb (cdr xs)) (cons (car xs) (remb (cdr xs)))))
                   ((E A 1 E 1)
                    (if-nest-E (equal (car xs) '?) (remb (cdr xs)) (cons (car xs) (remb (cdr xs)))))
                   ((E A 1 A) (equal-if (memb? (remb (cdr xs))) 'nil))
                   ((E A 1 E) (memb? (cons (car xs) (remb (cdr xs)))))
                   ((E A 1 E Q) (atom/cons (car xs) (remb (cdr xs))))
                   ((E A 1 E)
                    (if-false 'nil
                              (if (equal (car (cons (car xs) (remb (cdr xs)))) '?)
                                  't
                                  (memb? (cdr (cons (car xs) (remb (cdr xs))))))))
                   ((E A 1 E Q 1) (car/cons (car xs) (remb (cdr xs))))
                   ((E A 1 E E 1) (cdr/cons (car xs) (remb (cdr xs))))
                   ((E A 1 E) (if-nest-E (equal (car xs) '?) 't (memb? (remb (cdr xs)))))
                   ((E A 1 E) (equal-if (memb? (remb (cdr xs))) 'nil))
                   ((E A 1) (if-same (equal (car xs) '?) 'nil))
                   ((E A) (equal-same 'nil))
                   ((E) (if-same (equal (memb? (remb (cdr xs))) 'nil) 't))
                   (() (if-same (atom xs) 't))))))

;; Chapter 7

(defun defun.ctx? ()
  (J-Bob/define (dethm.memb?/remb)
                '(((defun ctx? (x)
                     (if (atom x) (equal x '?) (if (ctx? (car x)) 't (ctx? (cdr x)))))
                   (size x)
                   ((Q) (natp/size x))
                   (()
                    (if-true
                     (if (atom x)
                         't
                         (if (< (size (car x)) (size x))
                             (if (ctx? (car x)) 't (< (size (cdr x)) (size x)))
                             'nil))
                     'nil))
                   ((E Q) (size/car x))
                   ((E A E) (size/cdr x))
                   ((E A) (if-same (ctx? (car x)) 't))
                   ((E) (if-true 't 'nil))
                   (() (if-same (atom x) 't))))))

(defun dethm.ctx?/sub ()
  (J-Bob/define (defun.ctx?)
                '(((dethm ctx?/t (x)
                          (if (ctx? x) (equal (ctx? x) 't) 't))
                   (star-induction x)
                   ((A A 1) (ctx? x))
                   ((A A 1) (if-nest-A (atom x) (equal x '?) (if (ctx? (car x)) 't (ctx? (cdr x)))))
                   ((A Q) (ctx? x))
                   ((A Q) (if-nest-A (atom x) (equal x '?) (if (ctx? (car x)) 't (ctx? (cdr x)))))
                   ((A A 1 1) (equal-if x '?))
                   ((A A 1) (equal-same '?))
                   ((A A) (equal-same 't))
                   ((A) (if-same (equal x '?) 't))
                   ((E A A A 1) (ctx? x))
                   ((E A A A 1)
                    (if-nest-E (atom x) (equal x '?) (if (ctx? (car x)) 't (ctx? (cdr x)))))
                   ((E)
                    (if-same (ctx? (car x))
                             (if (if (ctx? (car x)) (equal (ctx? (car x)) 't) 't)
                                 (if (if (ctx? (cdr x)) (equal (ctx? (cdr x)) 't) 't)
                                     (if (ctx? x) (equal (if (ctx? (car x)) 't (ctx? (cdr x))) 't) 't)
                                     't)
                                 't)))
                   ((E A Q) (if-nest-A (ctx? (car x)) (equal (ctx? (car x)) 't) 't))
                   ((E A A A A 1) (if-nest-A (ctx? (car x)) 't (ctx? (cdr x))))
                   ((E E Q) (if-nest-E (ctx? (car x)) (equal (ctx? (car x)) 't) 't))
                   ((E E A A A 1) (if-nest-E (ctx? (car x)) 't (ctx? (cdr x))))
                   ((E A A A A) (equal-same 't))
                   ((E E)
                    (if-true
                     (if (if (ctx? (cdr x)) (equal (ctx? (cdr x)) 't) 't)
                         (if (ctx? x) (equal (ctx? (cdr x)) 't) 't)
                         't)
                     't))
                   ((E A A A) (if-same (ctx? x) 't))
                   ((E A A) (if-same (if (ctx? (cdr x)) (equal (ctx? (cdr x)) 't) 't) 't))
                   ((E A) (if-same (equal (ctx? (car x)) 't) 't))
                   ((E E A Q) (ctx? x))
                   ((E E A Q)
                    (if-nest-E (atom x) (equal x '?) (if (ctx? (car x)) 't (ctx? (cdr x)))))
                   ((E E A Q) (if-nest-E (ctx? (car x)) 't (ctx? (cdr x))))
                   ((E E)
                    (if-same (ctx? (cdr x))
                             (if (if (ctx? (cdr x)) (equal (ctx? (cdr x)) 't) 't)
                                 (if (ctx? (cdr x)) (equal (ctx? (cdr x)) 't) 't)
                                 't)))
                   ((E E A Q)(if-nest-A (ctx? (cdr x)) (equal (ctx? (cdr x)) 't) 't))
                   ((E E A A)(if-nest-A (ctx? (cdr x)) (equal (ctx? (cdr x)) 't) 't))
                   ((E E E Q)(if-nest-E (ctx? (cdr x)) (equal (ctx? (cdr x)) 't) 't))
                   ((E E E A)(if-nest-E (ctx? (cdr x)) (equal (ctx? (cdr x)) 't) 't))
                   ((E E E) (if-same 't 't))
                   ((E E A A 1) (equal-if (ctx? (cdr x)) 't))
                   ((E E A A) (equal-same 't))
                   ((E E A) (if-same (equal (ctx? (cdr x)) 't) 't))
                   ((E E) (if-same (ctx? (cdr x)) 't))
                   ((E) (if-same (ctx? (car x)) 't))
                   (() (if-same (atom x) 't)))
                  ((dethm ctx?/sub (x y)
                          (if (ctx? x) (if (ctx? y) (equal (ctx? (sub x y)) 't) 't) 't))
                   (star-induction y)
                   (()
                    (if-same (ctx? x)
                             (if (atom y)
                                 (if (ctx? x) (if (ctx? y) (equal (ctx? (sub x y)) 't) 't) 't)
                                 (if (if (ctx? x)
                                         (if (ctx? (car y)) (equal (ctx? (sub x (car y))) 't) 't)
                                         't)
                                     (if (if (ctx? x)
                                             (if (ctx? (cdr y)) (equal (ctx? (sub x (cdr y))) 't) 't)
                                             't)
                                         (if (ctx? x) (if (ctx? y) (equal (ctx? (sub x y)) 't) 't) 't)
                                         't)
                                     't))))
                   ((A A) (if-nest-A (ctx? x) (if (ctx? y) (equal (ctx? (sub x y)) 't) 't) 't))
                   ((A E Q)
                    (if-nest-A (ctx? x) (if (ctx? (car y)) (equal (ctx? (sub x (car y))) 't) 't) 't))
                   ((A E A Q)
                    (if-nest-A (ctx? x) (if (ctx? (cdr y)) (equal (ctx? (sub x (cdr y))) 't) 't) 't))
                   ((A E A A) (if-nest-A (ctx? x) (if (ctx? y) (equal (ctx? (sub x y)) 't) 't) 't))
                   ((E A) (if-nest-E (ctx? x) (if (ctx? y) (equal (ctx? (sub x y)) 't) 't) 't))
                   ((E E Q)
                    (if-nest-E (ctx? x) (if (ctx? (car y)) (equal (ctx? (sub x (car y))) 't) 't) 't))
                   ((E E A Q)
                    (if-nest-E (ctx? x) (if (ctx? (cdr y)) (equal (ctx? (sub x (cdr y))) 't) 't) 't))
                   ((E E A A) (if-nest-E (ctx? x) (if (ctx? y) (equal (ctx? (sub x y)) 't) 't) 't))
                   ((E E A) (if-same 't 't))
                   ((E E) (if-same 't 't))
                   ((E) (if-same (atom y) 't))
                   ((A A A 1 1) (sub x y))
                   ((A A A 1 1)
                    (if-nest-A (atom y)
                               (if (equal y '?) x y)
                               (cons (sub x (car y)) (sub x (cdr y)))))
                   ((A A A) (if-same (equal y '?) (equal (ctx? (if (equal y '?) x y)) 't)))
                   ((A A A A 1 1) (if-nest-A (equal y '?) x y))
                   ((A A A E 1 1) (if-nest-E (equal y '?) x y))
                   ((A A A A 1) (ctx?/t x))
                   ((A A A A) (equal-same 't))
                   ((A A A E 1) (ctx?/t y))
                   ((A A A E) (equal-same 't))
                   ((A A A) (if-same (equal y '?) 't))
                   ((A A) (if-same (ctx? y) 't))
                   ((A E A A A 1 1) (sub x y))
                   ((A E A A A 1 1)
                    (if-nest-E (atom y)
                               (if (equal y '?) x y)
                               (cons (sub x (car y)) (sub x (cdr y)))))
                   ((A E A A A 1) (ctx? (cons (sub x (car y)) (sub x (cdr y)))))
                   ((A E A A A 1 Q) (atom/cons (sub x (car y)) (sub x (cdr y))))
                   ((A E A A A 1 E Q 1) (car/cons (sub x (car y)) (sub x (cdr y))))
                   ((A E A A A 1 E E 1) (cdr/cons (sub x (car y)) (sub x (cdr y))))
                   ((A E A A A 1)
                    (if-false (equal (cons (sub x (car y)) (sub x (cdr y))) '?)
                              (if (ctx? (sub x (car y))) 't (ctx? (sub x (cdr y))))))
                   ((A E A A Q) (ctx? y))
                   ((A E A A Q)
                    (if-nest-E (atom y) (equal y '?) (if (ctx? (car y)) 't (ctx? (cdr y)))))
                   ((A E)
                    (if-same (ctx? (car y))
                             (if (if (ctx? (car y)) (equal (ctx? (sub x (car y))) 't) 't)
                                 (if (if (ctx? (cdr y)) (equal (ctx? (sub x (cdr y))) 't) 't)
                                     (if (if (ctx? (car y)) 't (ctx? (cdr y)))
                                         (equal (if (ctx? (sub x (car y))) 't (ctx? (sub x (cdr y)))) 't)
                                         't)
                                     't)
                                 't)))
                   ((A E A Q) (if-nest-A (ctx? (car y)) (equal (ctx? (sub x (car y))) 't) 't))
                   ((A E A A A Q) (if-nest-A (ctx? (car y)) 't (ctx? (cdr y))))
                   ((A E E Q) (if-nest-E (ctx? (car y)) (equal (ctx? (sub x (car y))) 't) 't))
                   ((A E E A A Q) (if-nest-E (ctx? (car y)) 't (ctx? (cdr y))))
                   ((A E A A A)
                    (if-true (equal (if (ctx? (sub x (car y))) 't (ctx? (sub x (cdr y)))) 't) 't))
                   ((A E E)
                    (if-true
                     (if (if (ctx? (cdr y)) (equal (ctx? (sub x (cdr y))) 't) 't)
                         (if (ctx? (cdr y))
                             (equal (if (ctx? (sub x (car y))) 't (ctx? (sub x (cdr y)))) 't)
                             't)
                         't)
                     't))
                   ((A E A A A 1 Q) (equal-if (ctx? (sub x (car y))) 't))
                   ((A E A A A 1) (if-true 't (ctx? (sub x (cdr y)))))
                   ((A E A A A) (equal-same 't))
                   ((A E A A) (if-same (if (ctx? (cdr y)) (equal (ctx? (sub x (cdr y))) 't) 't) 't))
                   ((A E A) (if-same (equal (ctx? (sub x (car y))) 't) 't))
                   ((A E E)
                    (if-same (ctx? (cdr y))
                             (if (if (ctx? (cdr y)) (equal (ctx? (sub x (cdr y))) 't) 't)
                                 (if (ctx? (cdr y))
                                     (equal (if (ctx? (sub x (car y))) 't (ctx? (sub x (cdr y)))) 't)
                                     't)
                                 't)))
                   ((A E E A Q) (if-nest-A (ctx? (cdr y)) (equal (ctx? (sub x (cdr y))) 't) 't))
                   ((A E E A A)
                    (if-nest-A (ctx? (cdr y))
                               (equal (if (ctx? (sub x (car y))) 't (ctx? (sub x (cdr y)))) 't)
                               't))
                   ((A E E E Q) (if-nest-E (ctx? (cdr y)) (equal (ctx? (sub x (cdr y))) 't) 't))
                   ((A E E E A)
                    (if-nest-E (ctx? (cdr y))
                               (equal (if (ctx? (sub x (car y))) 't (ctx? (sub x (cdr y)))) 't)
                               't))
                   ((A E E E) (if-same 't 't))
                   ((A E E A A 1 E) (equal-if (ctx? (sub x (cdr y))) 't))
                   ((A E E A A 1) (if-same (ctx? (sub x (car y))) 't))
                   ((A E E A A) (equal-same 't))
                   ((A E E A) (if-same (equal (ctx? (sub x (cdr y))) 't) 't))
                   ((A E E) (if-same (ctx? (cdr y)) 't))
                   ((A E) (if-same (ctx? (car y)) 't))
                   ((A) (if-same (atom y) 't))
                   (() (if-same (ctx? x) 't))))))

;; Chapter 8

(defun defun.member? ()
  (J-Bob/define (dethm.ctx?/sub)
                '(((defun member? (x ys)
                     (if (atom ys) 'nil (if (equal x (car ys)) 't (member? x (cdr ys)))))
                   (size ys)
                   ((Q) (natp/size ys))
                   (()
                    (if-true
                     (if (atom ys) 't (if (equal x (car ys)) 't (< (size (cdr ys)) (size ys))))
                     'nil))
                   ((E E) (size/cdr ys))
                   ((E) (if-same (equal x (car ys)) 't))
                   (() (if-same (atom ys) 't))))))

(defun defun.set? ()
  (J-Bob/define (defun.member?)
                '(((defun set? (xs)
                     (if (atom xs) 't (if (member? (car xs) (cdr xs)) 'nil (set? (cdr xs)))))
                   (size xs)
                   ((Q) (natp/size xs))
                   (()
                    (if-true
                     (if (atom xs)
                         't
                         (if (member? (car xs) (cdr xs)) 't (< (size (cdr xs)) (size xs))))
                     'nil))
                   ((E E) (size/cdr xs))
                   ((E) (if-same (member? (car xs) (cdr xs)) 't))
                   (() (if-same (atom xs) 't))))))

(defun defun.add-atoms ()
  (J-Bob/define (defun.set?)
                '(((defun add-atoms (x ys)
                     (if (atom x)
                         (if (member? x ys) ys (cons x ys))
                         (add-atoms (car x) (add-atoms (cdr x) ys))))
                   (size x)
                   ((Q) (natp/size x))
                   (()
                    (if-true
                     (if (atom x)
                         't
                         (if (< (size (car x)) (size x)) (< (size (cdr x)) (size x)) 'nil))
                     'nil))
                   ((E Q) (size/car x))
                   ((E A) (size/cdr x))
                   ((E) (if-true 't 'nil))
                   (() (if-same (atom x) 't))))))

(defun defun.atoms ()
  (J-Bob/define (defun.add-atoms)
                '(((defun atoms (x)
                     (add-atoms x '()))
                   nil))))

(defun dethm.set?/atoms.attempt ()
  (J-Bob/prove (defun.atoms)
               '(((dethm set?/add-atoms (a)
                         (equal (set? (add-atoms a '())) 't))
                  (star-induction a)
                  ((E A A 1 1) (add-atoms a '())))
                 ((dethm set?/atoms (a)
                         (equal (set? (atoms a)) 't))
                  nil
                  ((1 1) (atoms a))
                  ((1) (set?/add-atoms a))
                  (() (equal-same 't))))))

(defun dethm.set?/atoms ()
  (J-Bob/define (defun.atoms)
                '(((dethm set?/t (xs)
                          (if (set? xs) (equal (set? xs) 't) 't))
                   (list-induction xs)
                   ((A A 1) (set? xs))
                   ((A A 1)
                    (if-nest-A (atom xs) 't (if (member? (car xs) (cdr xs)) 'nil (set? (cdr xs)))))
                   ((A A) (equal-same 't))
                   ((A) (if-same (set? xs) 't))
                   ((E A A 1) (set? xs))
                   ((E A A 1)
                    (if-nest-E (atom xs) 't (if (member? (car xs) (cdr xs)) 'nil (set? (cdr xs)))))
                   ((E A Q) (set? xs))
                   ((E A Q)
                    (if-nest-E (atom xs) 't (if (member? (car xs) (cdr xs)) 'nil (set? (cdr xs)))))
                   ((E A)
                    (if-same (member? (car xs) (cdr xs))
                             (if (if (member? (car xs) (cdr xs)) 'nil (set? (cdr xs)))
                                 (equal (if (member? (car xs) (cdr xs)) 'nil (set? (cdr xs))) 't)
                                 't)))
                   ((E A A Q) (if-nest-A (member? (car xs) (cdr xs)) 'nil (set? (cdr xs))))
                   ((E A A A 1) (if-nest-A (member? (car xs) (cdr xs)) 'nil (set? (cdr xs))))
                   ((E A E Q) (if-nest-E (member? (car xs) (cdr xs)) 'nil (set? (cdr xs))))
                   ((E A E A 1) (if-nest-E (member? (car xs) (cdr xs)) 'nil (set? (cdr xs))))
                   ((E A A) (if-false (equal 'nil 't) 't))
                   ((E)
                    (if-same (set? (cdr xs))
                             (if (if (set? (cdr xs)) (equal (set? (cdr xs)) 't) 't)
                                 (if (member? (car xs) (cdr xs))
                                     't
                                     (if (set? (cdr xs)) (equal (set? (cdr xs)) 't) 't))
                                 't)))
                   ((E A Q) (if-nest-A (set? (cdr xs)) (equal (set? (cdr xs)) 't) 't))
                   ((E A A E) (if-nest-A (set? (cdr xs)) (equal (set? (cdr xs)) 't) 't))
                   ((E E Q) (if-nest-E (set? (cdr xs)) (equal (set? (cdr xs)) 't) 't))
                   ((E E A E) (if-nest-E (set? (cdr xs)) (equal (set? (cdr xs)) 't) 't))
                   ((E E A) (if-same (member? (car xs) (cdr xs)) 't))
                   ((E E) (if-same 't 't))
                   ((E A A E 1) (equal-if (set? (cdr xs)) 't))
                   ((E A A E) (equal-same 't))
                   ((E A A) (if-same (member? (car xs) (cdr xs)) 't))
                   ((E A) (if-same (equal (set? (cdr xs)) 't) 't))
                   ((E) (if-same (set? (cdr xs)) 't))
                   (() (if-same (atom xs) 't)))
                  ((dethm set?/nil (xs)
                          (if (set? xs) 't (equal (set? xs) 'nil)))
                   (list-induction xs)
                   ((A Q) (set? xs))
                   ((A Q)
                    (if-nest-A (atom xs) 't (if (member? (car xs) (cdr xs)) 'nil (set? (cdr xs)))))
                   ((A) (if-true 't (equal (set? xs) 'nil)))
                   ((E A E 1) (set? xs))
                   ((E A E 1)
                    (if-nest-E (atom xs) 't (if (member? (car xs) (cdr xs)) 'nil (set? (cdr xs)))))
                   ((E A Q) (set? xs))
                   ((E A Q)
                    (if-nest-E (atom xs) 't (if (member? (car xs) (cdr xs)) 'nil (set? (cdr xs)))))
                   ((E A)
                    (if-same (member? (car xs) (cdr xs))
                             (if (if (member? (car xs) (cdr xs)) 'nil (set? (cdr xs)))
                                 't
                                 (equal (if (member? (car xs) (cdr xs)) 'nil (set? (cdr xs))) 'nil))))
                   ((E A A Q) (if-nest-A (member? (car xs) (cdr xs)) 'nil (set? (cdr xs))))
                   ((E A A E 1) (if-nest-A (member? (car xs) (cdr xs)) 'nil (set? (cdr xs))))
                   ((E A E Q) (if-nest-E (member? (car xs) (cdr xs)) 'nil (set? (cdr xs))))
                   ((E A E E 1) (if-nest-E (member? (car xs) (cdr xs)) 'nil (set? (cdr xs))))
                   ((E A A E) (equal-same 'nil))
                   ((E A A) (if-same 'nil 't))
                   ((E)
                    (if-same (set? (cdr xs))
                             (if (if (set? (cdr xs)) 't (equal (set? (cdr xs)) 'nil))
                                 (if (member? (car xs) (cdr xs))
                                     't
                                     (if (set? (cdr xs)) 't (equal (set? (cdr xs)) 'nil)))
                                 't)))
                   ((E A Q) (if-nest-A (set? (cdr xs)) 't (equal (set? (cdr xs)) 'nil)))
                   ((E A A E) (if-nest-A (set? (cdr xs)) 't (equal (set? (cdr xs)) 'nil)))
                   ((E E Q) (if-nest-E (set? (cdr xs)) 't (equal (set? (cdr xs)) 'nil)))
                   ((E E A E) (if-nest-E (set? (cdr xs)) 't (equal (set? (cdr xs)) 'nil)))
                   ((E A A) (if-same (member? (car xs) (cdr xs)) 't))
                   ((E A) (if-same 't 't))
                   ((E E A E 1) (equal-if (set? (cdr xs)) 'nil))
                   ((E E A E) (equal-same 'nil))
                   ((E E A) (if-same (member? (car xs) (cdr xs)) 't))
                   ((E E) (if-same (equal (set? (cdr xs)) 'nil) 't))
                   ((E) (if-same (set? (cdr xs)) 't))
                   (() (if-same (atom xs) 't)))
                  ((dethm set?/add-atoms (a bs)
                          (if (set? bs) (equal (set? (add-atoms a bs)) 't) 't))
                   (add-atoms a bs)
                   ((A A 1 1) (add-atoms a bs))
                   ((A A 1 1)
                    (if-nest-A (atom a)
                               (if (member? a bs) bs (cons a bs))
                               (add-atoms (car a) (add-atoms (cdr a) bs))))
                   ((A A 1) (if-same (member? a bs) (set? (if (member? a bs) bs (cons a bs)))))
                   ((A A 1 A 1) (if-nest-A (member? a bs) bs (cons a bs)))
                   ((A A 1 E 1) (if-nest-E (member? a bs) bs (cons a bs)))
                   ((A A 1 A) (set?/t bs))
                   ((A A 1 E) (set? (cons a bs)))
                   ((A A 1 E Q) (atom/cons a bs))
                   ((A A 1 E E Q 1) (car/cons a bs))
                   ((A A 1 E E Q 2) (cdr/cons a bs))
                   ((A A 1 E E E 1) (cdr/cons a bs))
                   ((A A 1 E) (if-false 't (if (member? a bs) 'nil (set? bs))))
                   ((A A 1 E) (if-nest-E (member? a bs) 'nil (set? bs)))
                   ((A A 1 E) (set?/t bs))
                   ((A A 1) (if-same (member? a bs) 't))
                   ((A A) (equal-same 't))
                   ((A) (if-same (set? bs) 't))
                   ((E)
                    (if-same (set? bs)
                             (if (if (set? (add-atoms (cdr a) bs))
                                     (equal (set? (add-atoms (car a) (add-atoms (cdr a) bs))) 't)
                                     't)
                                 (if (if (set? bs) (equal (set? (add-atoms (cdr a) bs)) 't) 't)
                                     (if (set? bs) (equal (set? (add-atoms a bs)) 't) 't)
                                     't)
                                 't)))
                   ((E A A Q) (if-nest-A (set? bs) (equal (set? (add-atoms (cdr a) bs)) 't) 't))
                   ((E A A A) (if-nest-A (set? bs) (equal (set? (add-atoms a bs)) 't) 't))
                   ((E E A Q) (if-nest-E (set? bs) (equal (set? (add-atoms (cdr a) bs)) 't) 't))
                   ((E E A A) (if-nest-E (set? bs) (equal (set? (add-atoms a bs)) 't) 't))
                   ((E E A) (if-same 't 't))
                   ((E E)
                    (if-same
                     (if (set? (add-atoms (cdr a) bs))
                         (equal (set? (add-atoms (car a) (add-atoms (cdr a) bs))) 't)
                         't)
                     't))
                   ((E A)
                    (if-same (set? (add-atoms (cdr a) bs))
                             (if (if (set? (add-atoms (cdr a) bs))
                                     (equal (set? (add-atoms (car a) (add-atoms (cdr a) bs))) 't)
                                     't)
                                 (if (equal (set? (add-atoms (cdr a) bs)) 't)
                                     (equal (set? (add-atoms a bs)) 't)
                                     't)
                                 't)))
                   ((E A A Q)
                    (if-nest-A (set? (add-atoms (cdr a) bs))
                               (equal (set? (add-atoms (car a) (add-atoms (cdr a) bs))) 't)
                               't))
                   ((E A E Q)
                    (if-nest-E (set? (add-atoms (cdr a) bs))
                               (equal (set? (add-atoms (car a) (add-atoms (cdr a) bs))) 't)
                               't))
                   ((E A E)
                    (if-true
                     (if (equal (set? (add-atoms (cdr a) bs)) 't)
                         (equal (set? (add-atoms a bs)) 't)
                         't)
                     't))
                   ((E A A A Q 1) (set?/t (add-atoms (cdr a) bs)))
                   ((E A E Q 1) (set?/nil (add-atoms (cdr a) bs)))
                   ((E A A A Q) (equal 't 't))
                   ((E A E Q) (equal 'nil 't))
                   ((E A A A) (if-true (equal (set? (add-atoms a bs)) 't) 't))
                   ((E A E) (if-false (equal (set? (add-atoms a bs)) 't) 't))
                   ((E A A A 1 1) (add-atoms a bs))
                   ((E A A A 1 1)
                    (if-nest-E (atom a)
                               (if (member? a bs) bs (cons a bs))
                               (add-atoms (car a) (add-atoms (cdr a) bs))))
                   ((E A A A 1) (equal-if (set? (add-atoms (car a) (add-atoms (cdr a) bs))) 't))
                   ((E A A A) (equal-same 't))
                   ((E A A)
                    (if-same (equal (set? (add-atoms (car a) (add-atoms (cdr a) bs))) 't) 't))
                   ((E A) (if-same (set? (add-atoms (cdr a) bs)) 't))
                   ((E) (if-same (set? bs) 't))
                   (() (if-same (atom a) 't)))
                  ((dethm set?/atoms (a)
                          (equal (set? (atoms a)) 't))
                   nil
                   ((1 1) (atoms a))
                   (() (if-true (equal (set? (add-atoms a '())) 't) 't))
                   ((Q) (if-true 't (if (member? (car '()) (cdr '())) 'nil (set? (cdr '())))))
                   ((Q Q) (atom '()))
                   ((Q) (set? '()))
                   ((A 1) (set?/add-atoms a '()))
                   ((A) (equal-same 't))
                   (() (if-same (set? '()) 't))))))

;; Chapter 9

(defun defun.rotate ()
  (J-Bob/define (dethm.set?/atoms)
                '(((defun rotate (x)
                     (cons (car (car x)) (cons (cdr (car x)) (cdr x))))
                   nil))))

(defun dethm.rotate/cons ()
  (J-Bob/define (defun.rotate)
                '(((dethm rotate/cons (x y z)
                          (equal (rotate (cons (cons x y) z)) (cons x (cons y z))))
                   nil
                   ((1) (rotate (cons (cons x y) z)))
                   ((1 1 1) (car/cons (cons x y) z))
                   ((1 1) (car/cons x y))
                   ((1 2 1 1) (car/cons (cons x y) z))
                   ((1 2 1) (cdr/cons x y))
                   ((1 2 2) (cdr/cons (cons x y) z))
                   (() (equal-same (cons x (cons y z))))))))

(defun defun.align.attempt ()
  (J-Bob/prove (dethm.rotate/cons)
               '(((defun align (x)
                    (if (atom x)
                        x
                        (if (atom (car x)) (cons (car x) (align (cdr x))) (align (rotate x)))))
                  (size x)
                  ((Q) (natp/size x))
                  (()
                   (if-true
                    (if (atom x)
                        't
                        (if (atom (car x))
                            (< (size (cdr x)) (size x))
                            (< (size (rotate x)) (size x))))
                    'nil))
                  ((E A) (size/cdr x))
                  ((E E 1 1 1) (cons/car+cdr x))
                  ((E E 2 1) (cons/car+cdr x))
                  ((E E 1 1 1 1) (cons/car+cdr (car x)))
                  ((E E 2 1 1) (cons/car+cdr (car x)))
                  ((E E 1 1) (rotate/cons (car (car x)) (cdr (car x)) (cdr x)))))))

(defun defun.wt ()
  (J-Bob/define (dethm.rotate/cons)
                '(((defun wt (x)
                     (if (atom x) '1 (+ (+ (wt (car x)) (wt (car x))) (wt (cdr x)))))
                   (size x)
                   ((Q) (natp/size x))
                   (()
                    (if-true
                     (if (atom x)
                         't
                         (if (< (size (car x)) (size x)) (< (size (cdr x)) (size x)) 'nil))
                     'nil))
                   ((E Q) (size/car x))
                   ((E A) (size/cdr x))
                   ((E) (if-true 't 'nil))
                   (() (if-same (atom x) 't))))))

(defun defun.align ()
  (J-Bob/define (defun.wt)
                '(((dethm natp/wt (x)
                          (equal (natp (wt x)) 't))
                   (star-induction x)
                   ((A 1 1) (wt x))
                   ((A 1 1) (if-nest-A (atom x) '1 (+ (+ (wt (car x)) (wt (car x))) (wt (cdr x)))))
                   ((A 1) (natp '1))
                   ((A) (equal-same 't))
                   ((E A A 1 1) (wt x))
                   ((E A A 1 1)
                    (if-nest-E (atom x) '1 (+ (+ (wt (car x)) (wt (car x))) (wt (cdr x)))))
                   ((E A A)
                    (if-true (equal (natp (+ (+ (wt (car x)) (wt (car x))) (wt (cdr x)))) 't) 't))
                   ((E A A Q) (equal-if (natp (wt (car x))) 't))
                   ((E A A A)
                    (if-true (equal (natp (+ (+ (wt (car x)) (wt (car x))) (wt (cdr x)))) 't) 't))
                   ((E A A A Q) (natp/+ (wt (car x)) (wt (car x))))
                   ((E A A Q) (equal-if (natp (wt (car x))) 't))
                   ((E A A Q) (equal-if (natp (wt (cdr x))) 't))
                   ((E A A A A 1) (natp/+ (+ (wt (car x)) (wt (car x))) (wt (cdr x))))
                   ((E A A A A) (equal-same 't))
                   ((E A A A) (if-same (natp (+ (wt (car x)) (wt (car x)))) 't))
                   ((E A A) (if-same (natp (wt (cdr x))) 't))
                   ((E A) (if-same (equal (natp (wt (cdr x))) 't) 't))
                   ((E) (if-same (equal (natp (wt (car x))) 't) 't))
                   (() (if-same (atom x) 't)))
                  ((dethm positive/wt (x)
                          (equal (< '0 (wt x)) 't))
                   (star-induction x)
                   ((A 1 2) (wt x))
                   ((A 1 2) (if-nest-A (atom x) '1 (+ (+ (wt (car x)) (wt (car x))) (wt (cdr x)))))
                   ((A 1) (< '0 '1))
                   ((A) (equal-same 't))
                   ((E A A 1 2) (wt x))
                   ((E A A 1 2)
                    (if-nest-E (atom x) '1 (+ (+ (wt (car x)) (wt (car x))) (wt (cdr x)))))
                   ((E A A)
                    (if-true (equal (< '0 (+ (+ (wt (car x)) (wt (car x))) (wt (cdr x)))) 't) 't))
                   ((E A A Q) (equal-if (< '0 (wt (car x))) 't))
                   ((E A A A)
                    (if-true (equal (< '0 (+ (+ (wt (car x)) (wt (car x))) (wt (cdr x)))) 't) 't))
                   ((E A A A Q) (positives-+ (wt (car x)) (wt (car x))))
                   ((E A A Q) (equal-if (< '0 (wt (car x))) 't))
                   ((E A A Q) (equal-if (< '0 (wt (cdr x))) 't))
                   ((E A A A A 1) (positives-+ (+ (wt (car x)) (wt (car x))) (wt (cdr x))))
                   ((E A A A A) (equal-same 't))
                   ((E A A A) (if-same (< '0 (+ (wt (car x)) (wt (car x)))) 't))
                   ((E A A) (if-same (< '0 (wt (cdr x))) 't))
                   ((E A) (if-same (equal (< '0 (wt (cdr x))) 't) 't))
                   ((E) (if-same (equal (< '0 (wt (car x))) 't) 't))
                   (() (if-same (atom x) 't)))
                  ((defun align (x)
                     (if (atom x)
                         x
                         (if (atom (car x)) (cons (car x) (align (cdr x))) (align (rotate x)))))
                   (wt x)
                   ((Q) (natp/wt x))
                   (()
                    (if-true
                     (if (atom x)
                         't
                         (if (atom (car x)) (< (wt (cdr x)) (wt x)) (< (wt (rotate x)) (wt x))))
                     'nil))
                   ((E A 2) (wt x))
                   ((E A 2) (if-nest-E (atom x) '1 (+ (+ (wt (car x)) (wt (car x))) (wt (cdr x)))))
                   ((E A)
                    (if-true (< (wt (cdr x)) (+ (+ (wt (car x)) (wt (car x))) (wt (cdr x)))) 't))
                   ((E A Q) (natp/wt (cdr x)))
                   ((E A A 1) (identity-+ (wt (cdr x))))
                   ((E A A) (common-addends-< '0 (+ (wt (car x)) (wt (car x))) (wt (cdr x))))
                   ((E A Q) (natp/wt (cdr x)))
                   ((E A Q) (positive/wt (car x)))
                   ((E A A) (positives-+ (wt (car x)) (wt (car x))))
                   ((E A) (if-same (< '0 (wt (car x))) 't))
                   ((E E 1 1) (rotate x))
                   ((E E 1) (wt (cons (car (car x)) (cons (cdr (car x)) (cdr x)))))
                   ((E E 1 Q) (atom/cons (car (car x)) (cons (cdr (car x)) (cdr x))))
                   ((E E 1)
                    (if-false '1
                              (+ (+ (wt (car (cons (car (car x)) (cons (cdr (car x)) (cdr x)))))
                                    (wt (car (cons (car (car x)) (cons (cdr (car x)) (cdr x))))))
                                 (wt (cdr (cons (car (car x)) (cons (cdr (car x)) (cdr x))))))))
                   ((E E 1 1 1 1) (car/cons (car (car x)) (cons (cdr (car x)) (cdr x))))
                   ((E E 1 1 2 1) (car/cons (car (car x)) (cons (cdr (car x)) (cdr x))))
                   ((E E 1 2 1) (cdr/cons (car (car x)) (cons (cdr (car x)) (cdr x))))
                   ((E E 1 2) (wt (cons (cdr (car x)) (cdr x))))
                   ((E E 1 2 Q) (atom/cons (cdr (car x)) (cdr x)))
                   ((E E 1 2)
                    (if-false '1
                              (+ (+ (wt (car (cons (cdr (car x)) (cdr x))))
                                    (wt (car (cons (cdr (car x)) (cdr x)))))
                                 (wt (cdr (cons (cdr (car x)) (cdr x)))))))
                   ((E E 1 2 1 1 1) (car/cons (cdr (car x)) (cdr x)))
                   ((E E 1 2 1 2 1) (car/cons (cdr (car x)) (cdr x)))
                   ((E E 1 2 2 1) (cdr/cons (cdr (car x)) (cdr x)))
                   ((E E 2) (wt x))
                   ((E E 2) (if-nest-E (atom x) '1 (+ (+ (wt (car x)) (wt (car x))) (wt (cdr x)))))
                   ((E E 2 1 1) (wt (car x)))
                   ((E E 2 1 1)
                    (if-nest-E (atom (car x))
                               '1
                               (+ (+ (wt (car (car x))) (wt (car (car x)))) (wt (cdr (car x))))))
                   ((E E 2 1 2) (wt (car x)))
                   ((E E 2 1 2)
                    (if-nest-E (atom (car x))
                               '1
                               (+ (+ (wt (car (car x))) (wt (car (car x)))) (wt (cdr (car x))))))
                   ((E E 1)
                    (associate-+
                     (+ (wt (car (car x))) (wt (car (car x))))
                     (+ (wt (cdr (car x))) (wt (cdr (car x))))
                     (wt (cdr x))))
                   ((E E)
                    (common-addends-<
                     (+ (+ (wt (car (car x))) (wt (car (car x))))
                        (+ (wt (cdr (car x))) (wt (cdr (car x)))))
                     (+ (+ (+ (wt (car (car x))) (wt (car (car x)))) (wt (cdr (car x))))
                        (+ (+ (wt (car (car x))) (wt (car (car x)))) (wt (cdr (car x)))))
                     (wt (cdr x))))
                   ((E E 1)
                    (associate-+
                     (+ (wt (car (car x))) (wt (car (car x))))
                     (wt (cdr (car x)))
                     (wt (cdr (car x)))))
                   ((E E 1)
                    (commute-+
                     (+ (+ (wt (car (car x))) (wt (car (car x)))) (wt (cdr (car x))))
                     (wt (cdr (car x)))))
                   ((E E)
                    (common-addends-<
                     (wt (cdr (car x)))
                     (+ (+ (wt (car (car x))) (wt (car (car x)))) (wt (cdr (car x))))
                     (+ (+ (wt (car (car x))) (wt (car (car x)))) (wt (cdr (car x))))))
                   ((E E)
                    (if-true
                     (< (wt (cdr (car x)))
                        (+ (+ (wt (car (car x))) (wt (car (car x)))) (wt (cdr (car x)))))
                     't))
                   ((E E Q) (natp/wt (cdr (car x))))
                   ((E E A 1) (identity-+ (wt (cdr (car x)))))
                   ((E E A)
                    (common-addends-<
                     '0
                     (+ (wt (car (car x))) (wt (car (car x))))
                     (wt (cdr (car x)))))
                   ((E E Q) (natp/wt (cdr (car x))))
                   ((E E Q) (positive/wt (car (car x))))
                   ((E E A) (positives-+ (wt (car (car x))) (wt (car (car x)))))
                   ((E E) (if-same (< '0 (wt (car (car x)))) 't))
                   ((E) (if-same (atom (car x)) 't))
                   (() (if-same (atom x) 't))))))

(defun dethm.align/align ()
  (J-Bob/define (defun.align)
                '(((dethm align/align (x)
                          (equal (align (align x)) (align x)))
                   (align x)
                   ((A 1 1) (align x))
                   ((A 1 1)
                    (if-nest-A (atom x)
                               x
                               (if (atom (car x)) (cons (car x) (align (cdr x))) (align (rotate x)))))
                   ((A 2) (align x))
                   ((A 2)
                    (if-nest-A (atom x)
                               x
                               (if (atom (car x)) (cons (car x) (align (cdr x))) (align (rotate x)))))
                   ((A 1) (align x))
                   ((A 1)
                    (if-nest-A (atom x)
                               x
                               (if (atom (car x)) (cons (car x) (align (cdr x))) (align (rotate x)))))
                   ((A) (equal-same x))
                   ((E A A 1 1) (align x))
                   ((E A A 1 1)
                    (if-nest-E (atom x)
                               x
                               (if (atom (car x)) (cons (car x) (align (cdr x))) (align (rotate x)))))
                   ((E A A 1 1)
                    (if-nest-A (atom (car x)) (cons (car x) (align (cdr x))) (align (rotate x))))
                   ((E A A 2) (align x))
                   ((E A A 2)
                    (if-nest-E (atom x)
                               x
                               (if (atom (car x)) (cons (car x) (align (cdr x))) (align (rotate x)))))
                   ((E A A 2)
                    (if-nest-A (atom (car x)) (cons (car x) (align (cdr x))) (align (rotate x))))
                   ((E A A 1) (align (cons (car x) (align (cdr x)))))
                   ((E A A 1 Q) (atom/cons (car x) (align (cdr x))))
                   ((E A A 1 E Q 1) (car/cons (car x) (align (cdr x))))
                   ((E A A 1 E A 1) (car/cons (car x) (align (cdr x))))
                   ((E A A 1 E A 2 1) (cdr/cons (car x) (align (cdr x))))
                   ((E A A 1)
                    (if-false (cons (car x) (align (cdr x)))
                              (if (atom (car x))
                                  (cons (car x) (align (align (cdr x))))
                                  (align (rotate (cons (car x) (align (cdr x))))))))
                   ((E A A 1)
                    (if-nest-A (atom (car x))
                               (cons (car x) (align (align (cdr x))))
                               (align (rotate (cons (car x) (align (cdr x)))))))
                   ((E A A 1 2) (equal-if (align (align (cdr x))) (align (cdr x))))
                   ((E A A) (equal-same (cons (car x) (align (cdr x)))))
                   ((E A) (if-same (equal (align (align (cdr x))) (align (cdr x))) 't))
                   ((E E A 1 1) (align x))
                   ((E E A 1 1)
                    (if-nest-E (atom x)
                               x
                               (if (atom (car x)) (cons (car x) (align (cdr x))) (align (rotate x)))))
                   ((E E A 1 1)
                    (if-nest-E (atom (car x)) (cons (car x) (align (cdr x))) (align (rotate x))))
                   ((E E A 2) (align x))
                   ((E E A 2)
                    (if-nest-E (atom x)
                               x
                               (if (atom (car x)) (cons (car x) (align (cdr x))) (align (rotate x)))))
                   ((E E A 2)
                    (if-nest-E (atom (car x)) (cons (car x) (align (cdr x))) (align (rotate x))))
                   ((E E A 1) (equal-if (align (align (rotate x))) (align (rotate x))))
                   ((E E A) (equal-same (align (rotate x))))
                   ((E E) (if-same (equal (align (align (rotate x))) (align (rotate x))) 't))
                   ((E) (if-same (atom (car x)) 't))
                   (() (if-same (atom x) 't))))))
